#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 20 12:35:58 2020

@author: jtcasbur
"""

import numpy as np
from scipy.integrate import quad
import matplotlib.pyplot as plt

'Time'
hr = 6
mi = 0
s = 0
tot = hr*3600 + mi*60 + s #total time in seconds

'Tank Specifications'
d = 3.7 #m tank diameter
ht = 10.7 #m tank height
nth = 116 #number of tanks
V = (1/4)*np.pi*d**2*ht*nth #m^3 total volume of all tanks
V1 = (1/4)*np.pi*d**2*ht #m^3 volume of one tank
rho = 1804 #kg/m^3
m = V*rho #kg
A = (d*np.pi*ht + (np.pi*d**2)/2)*nth #m^2
To = 298 #K
h = 0.05 #kW/m^2*K
Tin_h = 600 + 273 #inlet temp of hot tank (K)
Tin_c = 300 + 273 #inlet temp of cold tank (K)
print('V =', V, 'm^3')

'Salt Specifications'
Cp = 1.52 #kJ/kg*K

'Exergetic efficiency integrals'
t = np.linspace(0,tot,60) #s time differentiator
theta = np.exp(-h*A*t/(m*Cp)) #temperature parameter
ncar_h = 1 - (To/Tin_h) #carnot efficiency of hot tank
ncar_c = 1 - (To/Tin_c) #carnot efficiency of cold tank

def hotnum(t, ncar_h): #Equation for numerator of hot tank exergetic efficiency
    return np.exp(-h*A*t/(m*Cp)) + ((1-ncar_h)/ncar_h)*np.log(np.exp(-h*A*t/(m*Cp))*(ncar_h/(1-ncar_h))+1)
def hotden(t, ncar_h): #Equation for denominator of hot tank exergetic efficiency
    return 1 + ((1-ncar_h)/ncar_h)*np.log(1/(1-ncar_h))
def coldnum(t, ncar_c): #Equation for numerator of cold tank exergetic efficiency
    return np.exp(-h*A*t/(m*Cp)) + ((1-ncar_c)/ncar_c)*np.log(np.exp(-h*A*t/(m*Cp))*(ncar_c/(1-ncar_c))+1)
def coldden(t, ncar_c): #Equation for denominator of cold tank exergetic efficiency
    return 1 + ((1-ncar_c)/ncar_c)*np.log(1/(1-ncar_c))

Hotnum = quad(hotnum, 0, tot, args=(ncar_h)) #Integral of function
Hotden = quad(hotden, 0, tot, args =(ncar_h)) #Integral of function
Coldnum = quad(coldnum, 0, tot, args=(ncar_c)) #Integral of function
Coldden = quad(coldden, 0, tot, args=(ncar_c)) #Integral of function

neff_h = Hotnum[0]/Hotden[0] #exergetic efficiency of hot tank
neff_c = Coldnum[0]/Coldden[0] #exergetic efficiency of cold tank
print('neff_h =', neff_h)
print('neff_c =', neff_c)


'Heat Loss'
Id = d #inside diameter
Od = d + 0.00635 #diameter plus thickness
Pi = np.pi
As = (d*np.pi*ht + (np.pi*d**2)/4)*nth #m^2

kss = 16.2                                                                     #Heat capacity of AISI 304 steel 'W/mK'
kc = 44                                                                        #Heat capacity of ASTM  steel 'W/mK'
Thos = (Od - Id) / 2                                                           #Thickness of steel wall 'm'
Rdps = Thos / kss                                                              #Thermal resistance of hot tank 'm2K/W'
Rdpc = Thos / kc                                                               #Thermal resistance of cold tank
Rdpi = .75                                                                     #Thermal resistance of insulation 'm2K/W'
Rdpa = 1 / (h*1000)                                                            #Thermal resistance of air 'm2K/W'

sigma = 5.67e-8                                                                #Sigma
eps = .9                                                                       #Epsilon
Tsurr = 298                                                                    #Tsurrounding 'K'
Tsurf = 321.12                                                                 #Tsurface 'K'

hrad = sigma * eps * (Tsurf - Tsurr) * (Tsurf**2 + Tsurr**2)                   #hr radiation 'W/m2K'
Rdpr = 1 / hrad                                                                  #Thermal Resistance of radiation 'm2K/W'

Rdpt = Rdps + Rdpi + ((( 1 / Rdpa) + (1 / Rdpr))**(-1))                        #Total thermal resistance 'm2K/W' Hot
Rdpco = Rdpc + Rdpi + ((( 1 / Rdpa) + (1 / Rdpr))**(-1))                        #Total thermal resistance 'm2K/W' Cold
qdp = (Tin_h- 298) / Rdpt                                                      #Heat flux 'W/m2'
qdc = (Tin_c- 298) / Rdpco                                                      #Heat flux 'W/m2'
qt = qdp * As / 1000                                                            #Heat transfer 'kW' hot
qc = qdc * As / 1000                                                           #Heat transfer 'kW' cold

print('Est=', Est, 'Mwh')
EstJh = Ed*V*Tin_h #kJ
EstJc = Ed*V*Tin_c #kJ
Hlrh = (Tin_h - To) / EstJh                                                    #Heat loss rate 'K/kJ'
Td = Hlrh * qt * tot                                                           #Temperature loss over time K - hot
Hlrc = (Tin_c - To) / EstJc                                                    #Heat loss rate 'K/MWh'
Tdc = Hlrc * qc * tot                                                          #Temperature loss over time K - cold
Ed = rho*Cp #Energy Density kJ/m^3*K
Edideal = Ed/3600/1000*(Tin_h - Tin_c) #Energy Density MWh/m^3
Edh = Ed/3600/1000*((Tin_h-Td) - (Tin_c-Tdc)) #Energy Density MWh/m^3
Estideal = (Edideal * V)
Est = (Edh * V) #energy storage per hour MWh
'Flow'
Totmdot = 2400
perc = 0.8
mdot = Totmdot*perc #mass flow rate kg/s
Vdot = mdot/rho #volumetric flow rate m^3/s
reqtime = 1/(Vdot/V) #time to fill the hot tank
print(mdot)
print(Vdot)
print("Time to fill=", reqtime / 60,  'min')

'Cost'

"Tank"
Ccold = 22000                                                                  #Cost of cold tank
Chot = 47500                                                                   #Cost of hot tank
Tt = Ccold*(nth) + Chot*(nth)

"Salt"
Cs = 1.1                                                                       #Cost of salt $/kg                                                        #Mass of salt 'kg'
Tcs = m * Cs                                                                   #Total cost of salt '$'

"Pump"
nr= 29  #number of rows of tanks (grid of 29x4)
dp = 0.2  #diameter of pipe meters
dt = 3.7  #diameter of the tank
ccp = 157.68   # $/m
chp = 420.49  #$/m
lpipe1 = 0.25 #meters
lpipe2 = 3.7  #meters
lpipelongest= nr*dt  #meters (farthest tank away from system)
cct = (lpipe1+lpipe2)*ccp #cost of single cold tank piping
cht = (lpipe1+lpipe2)*chp  #cost of single hot tank piping
tcp = cct+cht       #total cost of piping for 1 hot and 1 cold tank scenario

'piping cost for a scale lattice of tanks ex. uses 29x4'
costcppertank = lpipe1*ccp*nth
costhppertank = lpipe1*chp*nth
costcpmiddlelength = lpipelongest*ccp
costhpmiddlelength = lpipelongest*chp

Tcp = costcppertank+costhppertank+costcpmiddlelength +costhpmiddlelength

' pump power ' 
lambdap = 0.00003 #lambda of stainless steel and carbon steel (meters)
zeta = 0.3  #bend coefficant for piping
gravity = 9.8  #m/s^2
massflow = 500 #kg/s
eff = 0.85  #average efficiency of pump
areapipe = 3.14*(dp**2)/4
velocity = massflow/(rho*areapipe)  #velocity of salt
volumetricflow = massflow/rho  #volumetric flowrate m^3/s

#calculates pressure loss then pumping power

pdstraight1 = lambdap*(lpipe1/dp)*(rho/2)*(velocity**2)  #pascal
pdstraight2 = lambdap*(lpipe2/dp)*(rho/2)*(velocity**2)  #pascal
pdbend = zeta*(rho/2)*(velocity**2)   #pascal
totalpd = pdstraight1+pdstraight2+pdbend  #pascal
pumpingpower = totalpd*volumetricflow  #watt
electricalpower= pumpingpower/eff  #watt per tank in front row

pdstraightmax = lambdap*(lpipelongest/dp)*(rho/2)*(velocity**2)  #pascal
maxpower = (pdstraightmax+pdstraight1+pdbend)*volumetricflow
maxpowerelec= maxpower/eff  #watt for farthest tank in system


"Piping"
Cppih = 420.5                                                                  #Cost of pipe per meter
Len = 12.55*nth                                                                #Length of hot piping m
Cppic = 157.68                                                                 #Cost of pipe per meter
Tcpi = (Cppih * Len) + (Cppic * Len)                                           #Total cost of piping

"Insulation"
Cpt = 150                                                                      #Cost per roll of aluminum silicate ceramic fiber
Apr = 9.2903                                                                   #square meter per roll
As = (d*np.pi*ht + (np.pi*d**2)/4)                                             #m^2 surface air of tank insulation
Nrpt = round(As / Apr)                                                         #number of rolls per tank
Tci = 2*nth * Nrpt * Cpt                                                       #total cost of insulation

"Total"
C = Tt + Tcs + Tcpi + Tcp + Tci                                                #Total cost '$'
Cpkwh = C / (Est*1000)                                                         #Cost per KWh '$/KWh'
Cpkwhi = C / (Estideal*1000)
print('Total cost of storage $',C)
print('Cost per KWh',Cpkwh,'$/KWh')

